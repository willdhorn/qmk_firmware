#pragma once

#include "willdhorn.h"

// System
#define TH_BKSP TH(THA_BKSP)
#define TH_ENTER TH(THA_ENTER)
#define TH_ESC TH(THA_ESC)
// Punctuation and Symbols
#define TH_COMMA TH(THA_COMMA)
#define TH_DOT TH(THA_DOT)
#define TH_QUOT TH(THA_QUOT)

#define TH_MINS TH(THA_MINS)
#define TH_SLSH TH(THA_SLSH)
#define TH_EQLS TH(THA_EQLS)
#define TH_TILD TH(THA_TILD)
// Brackets
#define TH_LCBR TH(THA_LCBR)
#define TH_LPRN TH(THA_LPRN)
#define TH_LBRC TH(THA_LBRC)
#define TH_LABK TH(THA_LABK)
// Arrow keys
#define TH_LEFT TH(THA_LEFT)
#define TH_ALT_LFT TH(THA_ALT_LFT)
#define TH_RIGHT TH(THA_RIGHT)
#define TH_ALT_RGT TH(THA_ALT_RGT)
// ZXCV Shortcuts
#define TH_UNDO_Z TH(THA_UNDO_Z)
#define TH_CUT_X TH(THA_CUT_X)
#define TH_COPY_C TH(THA_COPY_C)
#define TH_PASTE_D TH(THA_PASTE_D)
#define TH_CLIPBOARD_V TH(THA_CLIPBOARD_V)
// Layer Switching
#define TH_LK_DEF TH(THA_LK_DEF)
#define TH_LK_SYM TH(THA_LK_SYM)

enum tap_hold_action_keys {
#define TH_ACTION_ENTER ACTION_TAP_CMD_HOLD(KC_ENTER)
  THA_ENTER = 0,
#define TH_ACTION_ESC ACTION_TAP_HOLD_SHIFT(KC_ESC, LSFT(KC_ESC), KC_CAPSLOCK, KC_CLEAR_MODS)
  THA_ESC,
#define TH_ACTION_BKSP ACTION_TAP_HOLD_SHIFT(KC_BACKSPACE, KC_DELETE, OSX_BKSP_LINE, OSX_DEL_LINE)
  THA_BKSP,

#define TH_ACTION_COMMA ACTION_TAP_HOLD_SHIFT(KC_COMMA, KC_EXLM, KC_MINS, KC_EXLM)
  THA_COMMA,
#define TH_ACTION_DOT ACTION_TAP_HOLD_SHIFT(KC_DOT, KC_QUES, KC_SLSH, KC_QUES)
  THA_DOT,
#define TH_ACTION_QUOT ACTION_TAP_HOLD_SHIFT(KC_QUOTE, KC_BSLS, KC_DQUO, KC_BSLS)
  THA_QUOT,

#define TH_ACTION_MINS ACTION_TAP_HOLD_SHIFT(KC_MINS, KC_EXLM, KC_COMMA, KC_EXLM)
  THA_MINS,
#define TH_ACTION_SLSH ACTION_TAP_HOLD_SHIFT(KC_SLSH, KC_QUES, KC_DOT, KC_QUES)
  THA_SLSH,
#define TH_ACTION_EQLS ACTION_TAP_HOLD(KC_EQL, MCR_NEQL)
  THA_EQLS,
#define TH_ACTION_TILD ACTION_TAP_HOLD(KC_TILD, MCR_TILD)
  THA_TILD,

#define TH_ACTION_LPRN ACTION_TAP_HOLD_SHIFT(KC_LPRN, KC_RPRN, MCR_PRNS, MCR_PRNS)
  THA_LPRN,
#define TH_ACTION_LCBR ACTION_TAP_HOLD_SHIFT(KC_LCBR, KC_RCBR, MCR_CBRS, MCR_CBRS)
  THA_LCBR,
#define TH_ACTION_LBRC ACTION_TAP_HOLD_SHIFT(KC_LBRC, KC_RBRC, MCR_BRCS, MCR_BRCS)
  THA_LBRC,
#define TH_ACTION_LABK ACTION_TAP_HOLD(KC_LABK, KC_RABK)
  THA_LABK,

#define TH_ACTION_LEFT ACTION_TAP_CMD_HOLD(KC_LEFT)
  THA_LEFT,
#define TH_ACTION_RIGHT ACTION_TAP_CMD_HOLD(KC_RIGHT)
  THA_RIGHT,
#define TH_ACTION_ALT_LFT ACTION_TAP_CMD_HOLD(LALT(KC_LEFT))
  THA_ALT_LFT,
#define TH_ACTION_ALT_RGT ACTION_TAP_CMD_HOLD(LALT(KC_RIGHT))
  THA_ALT_RGT,

#define TH_ACTION_UNDO_Z ACTION_TAP_HOLD(KC_Z, S_UNDO)
  THA_UNDO_Z,
#define TH_ACTION_CUT_X ACTION_TAP_HOLD(KC_X, S_CUT)
  THA_CUT_X,
#define TH_ACTION_COPY_C ACTION_TAP_HOLD(KC_C, S_COPY)
  THA_COPY_C,
#define TH_ACTION_PASTE_D ACTION_TAP_HOLD(KC_D, S_PASTE)
  THA_PASTE_D,
#define TH_ACTION_CLIPBOARD_V ACTION_TAP_HOLD(KC_V, S_CLIPBOARD)
  THA_CLIPBOARD_V,

#define TH_ACTION_LK_DEF ACTION_TAP_HOLD(LAYER_FN_DEF, LAYER_FN_EXT)
  THA_LK_DEF,
#define TH_ACTION_LK_SYM ACTION_TAP_HOLD(LAYER_FN_SYMSWAP, LAYER_FN_SYM)
  THA_LK_SYM,

  TAP_HOLD_KEY_MAX
};
