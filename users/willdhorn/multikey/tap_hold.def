// === TAP_HOLD(name, key, hold) ===
// TAP_HOLD(thNum_Dot, KC_DOT, KC_COMMA)
// TAP_HOLD(thEscape, KC_ESC, KC_CAPS)

// === TAP_HOLD_ALL(name, key, sft, hold, sft_hold) ===
TAP_HOLD_ALL(thBackspace, KC_BSPC, KC_DEL, OSX_BKSP_LINE, OSX_DEL_LINE)
TAP_HOLD_ALL(thPaste, S_PASTE, S_CLIPBOARD, S_CLIPBOARD, SFT(S_PASTE))
//
// TAP_HOLD_ALL(multiParen,   KC_LPRN, KC_RPRN, KC_RPRN, KC_RPRN)
// TAP_HOLD_ALL(multiBracket, KC_LBRC, KC_RBRC, KC_RBRC, KC_RBRC)
// TAP_HOLD_ALL(multiBrace,   KsC_LCBR, KC_RCBR, KC_RCBR, KC_RCBR)

// TAP_HOLD_ALL(thNav, LAYER_FN_NAV, KC_ESC, LAYER_FN_NAV, KC_CAPS)

/*
  === TAP_HOLD_CMD(name, key) ===
*/
// TAP_HOLD_CMD(thEnter, KC_ENTER)
TAP_HOLD_CMD(thLeft, KC_LEFT)
TAP_HOLD_CMD(thRight, KC_RGHT)
TAP_HOLD_CMD(thAltLeft, ALT(KC_LEFT))
TAP_HOLD_CMD(thAltRight, ALT(KC_RGHT))

// === TH_SFT_OVR(name, key, sft) ===
TH_SFT_OVR(thkoDashSlash, KC_MINS, KC_SLSH)
TH_SFT_OVR(thkoCommaExclamation, KC_COMMA, KC_EXLM)
TH_SFT_OVR(thkoPeriodQuestion, KC_DOT, KC_QUES)
TH_SFT_OVR(thkoColonSemicolon, KC_COLN, KC_SCLN)

// TH_SFT_OVR(thkoBackspace, KC_BSPC, KC_DEL)
TH_SFT_OVR(thkoEqual, KC_EQL, MCR_NEQL)
TH_SFT_OVR(thkoSlash, KC_SLSH, MCR_DIRUP)

// TODO: let layer keys work with tap hold
// TH_SFT_OVR(thkoSpaceUnderscore, kSpace, KC_UNDS)
// TH_SFT_OVR(thkoEscapeCapslock, kEscape, KC_CAPS)

TH_SFT_OVR(thkoLBraceAnglebrk, KC_LCBR, KC_LABK)
TH_SFT_OVR(thkoRBraceAnglebrk, KC_RCBR, KC_RABK)

// TH_SFT_OVR(thkoHashGrave, KC_HASH, KC_GRV)
// TH_SFT_OVR(thkoBackslashTilde, KC_ASTR, KC_TILDE)
// TH_SFT_OVR(thkoPipeCarrot, KC_PIPE, KC_CRRT)
// TH_SFT_OVR(thkoAmpersandDollar, KC_AMPR, KC_DLR)
// TH_SFT_OVR(thkoBackslashPercent, KC_BSLS, KC_PERC)

TH_SFT_OVR(thko1, KC_1, KC_TILDE)
TH_SFT_OVR(thko2, KC_2, _x_) // NOP
TH_SFT_OVR(thko3, KC_3, KC_AT)
TH_SFT_OVR(thko4, KC_4, KC_HASH)
TH_SFT_OVR(thko5, KC_5, KC_PIPE)
TH_SFT_OVR(thko6, KC_6, KC_AMPR)
TH_SFT_OVR(thko7, KC_7, KC_GRAVE)
TH_SFT_OVR(thko8, KC_8, KC_CRRT)
TH_SFT_OVR(thko9, KC_9, KC_DLR)
TH_SFT_OVR(thko0, KC_0, KC_BSLS)
